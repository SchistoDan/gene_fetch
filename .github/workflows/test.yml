name: Test gene-fetch

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.11']  # Test min and newer version
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: poetry run pytest

    - name: Test CLI help and version
      run: |
        poetry run gene-fetch --help
        echo "✓ CLI help command works"
        
    - name: Test CLI parameter validation (expected failures)
      run: |
        # Test missing required parameters
        poetry run gene-fetch -g cox1 --type protein -o ./test_output && exit 1 || echo "✓ CLI fails gracefully without email/api-key"
        
        # Test invalid email format
        # poetry run gene-fetch -e "invalid-email" -k "valid_test_key_12345" -g cox1 --type protein -i tests/data/test_samples.csv -o ./test_output && exit 1 || echo "✓ CLI handles invalid email format"
        
        # Test invalid API key
        # poetry run gene-fetch -e "test@example.com" -k "fake_key" -g cox1 --type protein -i tests/data/test_samples.csv -o ./test_output && exit 1 || echo "✓ CLI handles invalid API key"

    - name: Test CLI with real credentials (file validation)
      env:
        NCBI_EMAIL: ${{ secrets.NCBI_EMAIL }}
        NCBI_API_KEY: ${{ secrets.NCBI_API_KEY }}
      run: |
        # Only run if secrets are available
        if [ -n "$NCBI_EMAIL" ] && [ -n "$NCBI_API_KEY" ]; then
          echo "Testing with real NCBI credentials..."
          
          # Test missing input file (should fail for file reasons, not credential reasons)
          poetry run gene-fetch -e "$NCBI_EMAIL" -k "$NCBI_API_KEY" -g cox1 --type protein -i nonexistent.csv -o ./test_output && exit 1 || echo "✓ CLI handles missing input files"
          
          echo "✓ All credential and file validation tests passed"
          
        else
          echo "⚠️  NCBI credentials not available - skipping real credential tests"
          echo "   (This is normal for external contributors)"
        fi
        
    - name: Test CLI with test data (parameter parsing)
      run: |
        # Test that CLI accepts valid parameters and creates output directory
        # This will likely fail at NCBI API stage, but tests parameter validation
        mkdir -p cli_test_output
        
        # Test with your actual test data
        timeout 30s poetry run gene-fetch \
          -e "test@example.com" \
          -k "fake_api_key" \
          -g cox1 \
          --type protein \
          -i tests/data/test_samples.csv \
          -o cli_test_output \
          --protein-size 100 || echo "✓ CLI parameter parsing works (expected API failure)"
        
        # Test single mode with valid taxid from your test data
        timeout 30s poetry run gene-fetch \
          -e "test@example.com" \
          -k "fake_api_key" \
          -g cox1 \
          --type both \
          -s 210239 \
          -o cli_test_output \
          --max-sequences 2 \
          --genbank || echo "✓ CLI single mode parameter parsing works (expected API failure)"
        
        # Verify output directory structure is created
        [ -d "cli_test_output" ] && echo "✓ Output directory created" || echo "✗ Output directory not created"

    - name: Verify CLI creates proper file structure
      run: |
        # Test that CLI creates expected directory structure
        poetry run python -c "
        import os
        import sys
        sys.path.insert(0, 'src')
        
        # Test the output directory creation logic
        test_dirs = ['structure_test_protein', 'structure_test_both', 'structure_test_nucleotide']
        
        for test_dir in test_dirs:
            if os.path.exists(test_dir):
                import shutil
                shutil.rmtree(test_dir)
        
        # This tests internal functions that CLI uses
        try:
            from gene_fetch.main import setup_output_directory
            
            # Test protein-only output structure
            setup_output_directory('structure_test_protein', sequence_type='protein', genbank_output=False)
            assert os.path.exists('structure_test_protein'), 'Protein output dir not created'
            
            # Test both sequences with genbank
            setup_output_directory('structure_test_both', sequence_type='both', genbank_output=True)
            assert os.path.exists('structure_test_both'), 'Both output dir not created'
            assert os.path.exists('structure_test_both/nucleotide'), 'Nucleotide subdir not created'
            assert os.path.exists('structure_test_both/genbank'), 'Genbank subdir not created'
            
            print('✓ Output directory structure creation works correctly')
            
        except ImportError as e:
            print(f'Note: Could not test directory creation function - {e}')
            print('This may need adjustment based on your actual code structure')
        except Exception as e:
            print(f'Directory structure test failed: {e}')
            sys.exit(1)
        "
