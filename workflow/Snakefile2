from pathlib import Path
import os
import sys
import pandas as pd
from datetime import datetime

configfile: "config.yaml"

# Read samples CSV
if os.path.exists(config["samples_csv"]):
    sample_data = pd.read_csv(config["samples_csv"]).set_index("ID", drop=False)
else:
    sys.exit(f"Error: samples.csv file '{config['samples_csv']}' does not exist")

def get_taxid(wildcards):
    return sample_data.loc[wildcards.ID, "taxid"]

# Validation functions
def validate_config():
    """Validate configuration based on target type"""
    target_type = config["target_config"]["target_type"]
    valid_targets = {"gene", "chloroplast", "mitochondrion", "ribosomal", "ribosomal_complete"}
    
    if target_type not in valid_targets:
        raise ValueError(f"Invalid target_type: {target_type}. Must be one of: {valid_targets}")
        
    # Validate parameters based on target type
    if target_type == "gene":
        required_params = {"protein_size", "nucleotide_size", "sequence_types", "gene_names"}
        missing_params = required_params - set(config["target_config"]["gene_params"].keys())
        if missing_params:
            raise ValueError(f"Missing required gene_params: {missing_params}")
            
        # Validate samples.csv exists when target_type is gene
        if not os.path.exists(config["samples_csv"]):
            raise FileNotFoundError(f"samples_csv file not found: {config['samples_csv']}")
    else:
        required_params = {"database", "min_sequences", "max_sequences"}
        missing_params = required_params - set(config["target_config"]["fetch_params"].keys())
        if missing_params:
            raise ValueError(f"Missing required fetch_params: {missing_params}")

    # Validate run_name exists
    if "run_name" not in config:
        raise ValueError("run_name must be specified in config.yaml")

# Validate configuration
validate_config()

def get_final_outputs(wildcards):
    """Determine final outputs based on target type"""
    outputs = []
    target_type = config["target_config"]["target_type"]
    run_name = config["run_name"]
    
    if target_type == "gene":
        # Handle gene targets
        for gene in config["target_config"]["gene_params"]["gene_names"]:
            gene_dir = os.path.join("results", gene, run_name)
            outputs.extend([
                os.path.join(gene_dir, "sequence_references.csv"),
                os.path.join(gene_dir, "gene_fetch.log")
            ])
    else:
        # Handle organelle/ribosomal targets
        for sample_id in sample_data.index:
            target_dir = os.path.join("results", target_type, run_name, sample_id)
            if config["target_config"]["fetch_params"]["getorganelle"]:
                outputs.extend([
                    os.path.join(target_dir, "seed.fasta"),
                    os.path.join(target_dir, "gene.fasta")
                ])
            else:
                outputs.extend([
                    os.path.join(target_dir, "fasta"),
                    os.path.join(target_dir, "genbank")
                ])
    return outputs

rule all:
    input:
        get_final_outputs

rule fetch_gene_sequences:
    output:
        refs = os.path.join("results", "{gene}", config["run_name"], "sequence_references.csv"),
        log = os.path.join("results", "{gene}", config["run_name"], "gene_fetch.log")
    params:
        output_dir = lambda wildcards: os.path.join("results", wildcards.gene, config["run_name"]),
        protein_size = config["target_config"]["gene_params"]["protein_size"],
        nucleotide_size = config["target_config"]["gene_params"]["nucleotide_size"],
        email = config["email"],
        api_key = config["api_key"],
        sequence_type = config["target_config"]["gene_params"]["sequence_types"][0]
    log:
        os.path.join("logs", f"gene_fetch-{config['run_name']}-{{gene}}.log")    
    conda:
        "envs/fetch.yaml"
    wildcard_constraints:
        gene = "|".join(config["target_config"]["gene_params"]["gene_names"])
    shell:
        """
        python ./workflow/scripts/gene_fetch.py \
            {wildcards.gene} \
            {params.output_dir} \
            {config[samples_csv]} \
            --type {params.sequence_type} \
            --protein_size {params.protein_size} \
            --nucleotide_size {params.nucleotide_size} \
            2> {log}
        """

rule fetch_organelle_sequences:
    output:
        seed = os.path.join("results", config["target_config"]["target_type"], config["run_name"], "{ID}",
               "seed.fasta" if config["target_config"]["fetch_params"]["getorganelle"] else "fasta"),
        gene = os.path.join("results", config["target_config"]["target_type"], config["run_name"], "{ID}",
               "gene.fasta" if config["target_config"]["fetch_params"]["getorganelle"] else "genbank")
    params:
        output_dir = lambda wildcards: os.path.join("results", config["target_config"]["target_type"], config["run_name"], "{ID}"),
        target_type = config["target_config"]["target_type"],
        min_seq = config["target_config"]["fetch_params"]["min_sequences"],
        max_seq = config["target_config"]["fetch_params"]["max_sequences"],
        email = config["email"],
        api_key = config["api_key"],
        getorganelle = "--getorganelle" if config["target_config"]["fetch_params"].get("getorganelle", False) else "",
        database = config["target_config"]["fetch_params"]["database"],
        taxid = lambda wildcards: get_taxid(wildcards)
    log:
        os.path.join("logs", f"go_fetch-{config['run_name']}-{config['target_config']['target_type']}-{{ID}}.log")
    conda:
        "envs/fetch.yaml"
    shell:
        """
        python ./workflow/scripts/go_fetch.py \
            --taxonomy {params.taxid} \
            --target {params.target_type} \
            --db {params.database} \
            --min {params.min_seq} \
            --max {params.max_seq} \
            --output {params.output_dir} \
            --email {params.email} \
            --api {params.api_key} \
            {params.getorganelle} \
            --overwrite \
            2> {log}
        """